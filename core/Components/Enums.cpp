#include "Enums.h"
#include "BaseComponent.h"
#include "box2d/b2_body.h"

const int Enums::KEY_UNKNOWN = 0;
const int Enums::KEY_RETURN = '\r';
const int Enums::KEY_ESCAPE = '\x1B';
const int Enums::KEY_BACKSPACE = '\b';
const int Enums::KEY_TAB = '\t';
const int Enums::KEY_SPACE = ' ';
const int Enums::KEY_EXCLAIM = '!';
const int Enums::KEY_QUOTEDBL = '"';
const int Enums::KEY_HASH = '#';
const int Enums::KEY_PERCENT = '%';
const int Enums::KEY_DOLLAR = '$';
const int Enums::KEY_AMPERSAND = '&';
const int Enums::KEY_QUOTE = '\'';
const int Enums::KEY_LEFTPAREN = '(';
const int Enums::KEY_RIGHTPAREN = ')';
const int Enums::KEY_ASTERISK = '*';
const int Enums::KEY_PLUS = '+';
const int Enums::KEY_COMMA = ',';
const int Enums::KEY_MINUS = '-';
const int Enums::KEY_PERIOD = '.';
const int Enums::KEY_SLASH = '/';
const int Enums::KEY_0 = '0';
const int Enums::KEY_1 = '1';
const int Enums::KEY_2 = '2';
const int Enums::KEY_3 = '3';
const int Enums::KEY_4 = '4';
const int Enums::KEY_5 = '5';
const int Enums::KEY_6 = '6';
const int Enums::KEY_7 = '7';
const int Enums::KEY_8 = '8';
const int Enums::KEY_9 = '9';
const int Enums::KEY_COLON = ':';
const int Enums::KEY_SEMICOLON = ';';
const int Enums::KEY_LESS = '<';
const int Enums::KEY_EQUALS = '=';
const int Enums::KEY_GREATER = '>';
const int Enums::KEY_QUESTION = '?';
const int Enums::KEY_AT = '@';
const int Enums::KEY_LEFTBRACKET = '[';
const int Enums::KEY_BACKSLASH = '\\';
const int Enums::KEY_RIGHTBRACKET = ']';
const int Enums::KEY_CARET = '^';
const int Enums::KEY_UNDERSCORE = '_';
const int Enums::KEY_BACKQUOTE = '`';
const int Enums::KEY_A = 'a';
const int Enums::KEY_B = 'b';
const int Enums::KEY_C = 'c';
const int Enums::KEY_D = 'd';
const int Enums::KEY_E = 'e';
const int Enums::KEY_F = 'f';
const int Enums::KEY_G = 'g';
const int Enums::KEY_H = 'h';
const int Enums::KEY_I = 'i';
const int Enums::KEY_J = 'j';
const int Enums::KEY_K = 'k';
const int Enums::KEY_L = 'l';
const int Enums::KEY_M = 'm';
const int Enums::KEY_N = 'n';
const int Enums::KEY_O = 'o';
const int Enums::KEY_P = 'p';
const int Enums::KEY_Q = 'q';
const int Enums::KEY_R = 'r';
const int Enums::KEY_S = 's';
const int Enums::KEY_T = 't';
const int Enums::KEY_U = 'u';
const int Enums::KEY_V = 'v';
const int Enums::KEY_W = 'w';
const int Enums::KEY_X = 'x';
const int Enums::KEY_Y = 'y';
const int Enums::KEY_Z = 'z';

const int Enums::KEY_CAPSLOCK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CAPSLOCK);
const int Enums::KEY_F1 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F1);
const int Enums::KEY_F2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F2);
const int Enums::KEY_F3 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F3);
const int Enums::KEY_F4 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F4);
const int Enums::KEY_F5 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F5);
const int Enums::KEY_F6 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F6);
const int Enums::KEY_F7 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F7);
const int Enums::KEY_F8 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F8);
const int Enums::KEY_F9 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F9);
const int Enums::KEY_F10 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F10);
const int Enums::KEY_F11 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F11);
const int Enums::KEY_F12 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F12);

const int Enums::KEY_PRINTSCREEN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRINTSCREEN);
const int Enums::KEY_SCROLLLOCK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SCROLLLOCK);
const int Enums::KEY_PAUSE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAUSE);
const int Enums::KEY_INSERT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_INSERT);
const int Enums::KEY_HOME = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HOME);
const int Enums::KEY_PAGEUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEUP);
const int Enums::KEY_DELETE = '\x7F';
const int Enums::KEY_END = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_END);
const int Enums::KEY_PAGEDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEDOWN);
const int Enums::KEY_RIGHT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RIGHT);
const int Enums::KEY_LEFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LEFT);
const int Enums::KEY_DOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DOWN);
const int Enums::KEY_UP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UP);

const int Enums::KEY_NUMLOCKCLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_NUMLOCKCLEAR);
const int Enums::KEY_KP_DIVIDE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DIVIDE);
const int Enums::KEY_KP_MULTIPLY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MULTIPLY);
const int Enums::KEY_KP_MINUS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MINUS);
const int Enums::KEY_KP_PLUS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUS);
const int Enums::KEY_KP_ENTER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_ENTER);
const int Enums::KEY_KP_1 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_1);
const int Enums::KEY_KP_2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_2);
const int Enums::KEY_KP_3 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_3);
const int Enums::KEY_KP_4 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_4);
const int Enums::KEY_KP_5 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_5);
const int Enums::KEY_KP_6 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_6);
const int Enums::KEY_KP_7 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_7);
const int Enums::KEY_KP_8 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_8);
const int Enums::KEY_KP_9 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_9);
const int Enums::KEY_KP_0 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_0);
const int Enums::KEY_KP_PERIOD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERIOD);

const int Enums::KEY_APPLICATION = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APPLICATION);
const int Enums::KEY_POWER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_POWER);
const int Enums::KEY_KP_EQUALS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALS);
const int Enums::KEY_F13 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F13);
const int Enums::KEY_F14 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F14);
const int Enums::KEY_F15 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F15);
const int Enums::KEY_F16 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F16);
const int Enums::KEY_F17 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F17);
const int Enums::KEY_F18 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F18);
const int Enums::KEY_F19 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F19);
const int Enums::KEY_F20 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F20);
const int Enums::KEY_F21 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F21);
const int Enums::KEY_F22 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F22);
const int Enums::KEY_F23 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F23);
const int Enums::KEY_F24 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F24);
const int Enums::KEY_EXECUTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXECUTE);
const int Enums::KEY_HELP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HELP);
const int Enums::KEY_MENU = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MENU);
const int Enums::KEY_SELECT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SELECT);
const int Enums::KEY_STOP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_STOP);
const int Enums::KEY_AGAIN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AGAIN);
const int Enums::KEY_UNDO = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UNDO);
const int Enums::KEY_CUT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CUT);
const int Enums::KEY_COPY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COPY);
const int Enums::KEY_PASTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PASTE);
const int Enums::KEY_FIND = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_FIND);
const int Enums::KEY_MUTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MUTE);
const int Enums::KEY_VOLUMEUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEUP);
const int Enums::KEY_VOLUMEDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEDOWN);
const int Enums::KEY_KP_COMMA = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COMMA);
const int Enums::KEY_KP_EQUALSAS400 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALSAS400);

const int Enums::KEY_ALTERASE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ALTERASE);
const int Enums::KEY_SYSREQ = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SYSREQ);
const int Enums::KEY_CANCEL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CANCEL);
const int Enums::KEY_CLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEAR);
const int Enums::KEY_PRIOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRIOR);
const int Enums::KEY_RETURN2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RETURN2);
const int Enums::KEY_SEPARATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SEPARATOR);
const int Enums::KEY_OUT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OUT);
const int Enums::KEY_OPER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OPER);
const int Enums::KEY_CLEARAGAIN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEARAGAIN);
const int Enums::KEY_CRSEL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CRSEL);
const int Enums::KEY_EXSEL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXSEL);

const int Enums::KEY_KP_00 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_00);
const int Enums::KEY_KP_000 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_000);
const int Enums::KEY_THOUSANDSSEPARATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_THOUSANDSSEPARATOR);
const int Enums::KEY_DECIMALSEPARATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DECIMALSEPARATOR);
const int Enums::KEY_CURRENCYUNIT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYUNIT);
const int Enums::KEY_CURRENCYSUBUNIT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYSUBUNIT);
const int Enums::KEY_KP_LEFTPAREN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTPAREN);
const int Enums::KEY_KP_RIGHTPAREN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTPAREN);
const int Enums::KEY_KP_LEFTBRACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTBRACE);
const int Enums::KEY_KP_RIGHTBRACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTBRACE);
const int Enums::KEY_KP_TAB = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_TAB);
const int Enums::KEY_KP_BACKSPACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BACKSPACE);
const int Enums::KEY_KP_A = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_A);
const int Enums::KEY_KP_B = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_B);
const int Enums::KEY_KP_C = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_C);
const int Enums::KEY_KP_D = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_D);
const int Enums::KEY_KP_E = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_E);
const int Enums::KEY_KP_F = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_F);
const int Enums::KEY_KP_XOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_XOR);
const int Enums::KEY_KP_POWER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_POWER);
const int Enums::KEY_KP_PERCENT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERCENT);
const int Enums::KEY_KP_LESS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LESS);
const int Enums::KEY_KP_GREATER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_GREATER);
const int Enums::KEY_KP_AMPERSAND = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AMPERSAND);
const int Enums::KEY_KP_DBLAMPERSAND = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLAMPERSAND);
const int Enums::KEY_KP_VERTICALBAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_VERTICALBAR);
const int Enums::KEY_KP_DBLVERTICALBAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLVERTICALBAR);
const int Enums::KEY_KP_COLON = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COLON);
const int Enums::KEY_KP_HASH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HASH);
const int Enums::KEY_KP_SPACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_SPACE);
const int Enums::KEY_KP_AT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AT);
const int Enums::KEY_KP_EXCLAM = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EXCLAM);
const int Enums::KEY_KP_MEMSTORE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSTORE);
const int Enums::KEY_KP_MEMRECALL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMRECALL);
const int Enums::KEY_KP_MEMCLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMCLEAR);
const int Enums::KEY_KP_MEMADD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMADD);
const int Enums::KEY_KP_MEMSUBTRACT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSUBTRACT);
const int Enums::KEY_KP_MEMMULTIPLY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMMULTIPLY);
const int Enums::KEY_KP_MEMDIVIDE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMDIVIDE);
const int Enums::KEY_KP_PLUSMINUS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUSMINUS);
const int Enums::KEY_KP_CLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEAR);
const int Enums::KEY_KP_CLEARENTRY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEARENTRY);
const int Enums::KEY_KP_BINARY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BINARY);
const int Enums::KEY_KP_OCTAL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_OCTAL);
const int Enums::KEY_KP_DECIMAL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DECIMAL);
const int Enums::KEY_KP_HEXADECIMAL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HEXADECIMAL);

const int Enums::KEY_LCTRL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LCTRL);
const int Enums::KEY_LSHIFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LSHIFT);
const int Enums::KEY_LALT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LALT);
const int Enums::KEY_LGUI = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LGUI);
const int Enums::KEY_RCTRL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RCTRL);
const int Enums::KEY_RSHIFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RSHIFT);
const int Enums::KEY_RALT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RALT);
const int Enums::KEY_RGUI = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RGUI);

const int Enums::KEY_MODE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MODE);

const int Enums::KEY_AUDIONEXT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIONEXT);
const int Enums::KEY_AUDIOPREV = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOPREV);
const int Enums::KEY_AUDIOSTOP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOSTOP);
const int Enums::KEY_AUDIOPLAY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOPLAY);
const int Enums::KEY_AUDIOMUTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOMUTE);
const int Enums::KEY_MEDIASELECT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIASELECT);
const int Enums::KEY_WWW = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_WWW);
const int Enums::KEY_MAIL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MAIL);
const int Enums::KEY_CALCULATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CALCULATOR);
const int Enums::KEY_COMPUTER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COMPUTER);
const int Enums::KEY_AC_SEARCH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_SEARCH);
const int Enums::KEY_AC_HOME = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_HOME);
const int Enums::KEY_AC_BACK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BACK);
const int Enums::KEY_AC_FORWARD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_FORWARD);
const int Enums::KEY_AC_STOP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_STOP);
const int Enums::KEY_AC_REFRESH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_REFRESH);
const int Enums::KEY_AC_BOOKMARKS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BOOKMARKS);

const int Enums::KEY_BRIGHTNESSDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_BRIGHTNESSDOWN);
const int Enums::KEY_BRIGHTNESSUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_BRIGHTNESSUP);
const int Enums::KEY_DISPLAYSWITCH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DISPLAYSWITCH);
const int Enums::KEY_KBDILLUMTOGGLE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMTOGGLE);
const int Enums::KEY_KBDILLUMDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMDOWN);
const int Enums::KEY_KBDILLUMUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMUP);
const int Enums::KEY_EJECT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EJECT);
const int Enums::KEY_SLEEP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SLEEP);
const int Enums::KEY_APP1 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APP1);
const int Enums::KEY_APP2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APP2);

const int Enums::KEY_AUDIOREWIND = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOREWIND);
const int Enums::KEY_AUDIOFASTFORWARD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOFASTFORWARD);

const int Enums::STATIC_BODY = 0;
const int Enums::KINEMATIC_BODY = 1;
const int Enums::DYNAMIC_BODY = 2;

const int Enums::RENDER_SOLID = 0;
const int Enums::RENDER_SHARED = 1;
const int Enums::RENDER_LCD = 2;
const int Enums::RENDER_BLENDED = 3;

const int Enums::ALIGN_LEFT = 0;
const int Enums::ALIGN_MIDDLE = 1;
const int Enums::ALIGN_RIGHT = 2;

const int Enums::WINDOW_NORMAL = 0;
const int Enums::WINDOW_MAXIMIZED = 1;
const int Enums::WINDOW_FULL = 2;
const int Enums::WINDOW_FULL_DESK = 3;

void Enums::refl() {
    using REG_CLASS = Enums;
    auto& mgr = ReflMgr::Instance();
    ReflMgrTool::AutoRegister<REG_CLASS>();
    REG_STATIC_METHOD(AddEnum);
    REG_STATIC_FIELD(KEY_UNKNOWN);
    REG_STATIC_FIELD(KEY_RETURN);
    REG_STATIC_FIELD(KEY_ESCAPE);
    REG_STATIC_FIELD(KEY_BACKSPACE);
    REG_STATIC_FIELD(KEY_TAB);
    REG_STATIC_FIELD(KEY_SPACE);
    REG_STATIC_FIELD(KEY_EXCLAIM);
    REG_STATIC_FIELD(KEY_QUOTEDBL);
    REG_STATIC_FIELD(KEY_HASH);
    REG_STATIC_FIELD(KEY_PERCENT);
    REG_STATIC_FIELD(KEY_DOLLAR);
    REG_STATIC_FIELD(KEY_AMPERSAND);
    REG_STATIC_FIELD(KEY_QUOTE);
    REG_STATIC_FIELD(KEY_LEFTPAREN);
    REG_STATIC_FIELD(KEY_RIGHTPAREN);
    REG_STATIC_FIELD(KEY_ASTERISK);
    REG_STATIC_FIELD(KEY_PLUS);
    REG_STATIC_FIELD(KEY_COMMA);
    REG_STATIC_FIELD(KEY_MINUS);
    REG_STATIC_FIELD(KEY_PERIOD);
    REG_STATIC_FIELD(KEY_SLASH);
    REG_STATIC_FIELD(KEY_0);
    REG_STATIC_FIELD(KEY_1);
    REG_STATIC_FIELD(KEY_2);
    REG_STATIC_FIELD(KEY_3);
    REG_STATIC_FIELD(KEY_4);
    REG_STATIC_FIELD(KEY_5);
    REG_STATIC_FIELD(KEY_6);
    REG_STATIC_FIELD(KEY_7);
    REG_STATIC_FIELD(KEY_8);
    REG_STATIC_FIELD(KEY_9);
    REG_STATIC_FIELD(KEY_COLON);
    REG_STATIC_FIELD(KEY_SEMICOLON);
    REG_STATIC_FIELD(KEY_LESS);
    REG_STATIC_FIELD(KEY_EQUALS);
    REG_STATIC_FIELD(KEY_GREATER);
    REG_STATIC_FIELD(KEY_QUESTION);
    REG_STATIC_FIELD(KEY_AT);
    REG_STATIC_FIELD(KEY_LEFTBRACKET);
    REG_STATIC_FIELD(KEY_BACKSLASH);
    REG_STATIC_FIELD(KEY_RIGHTBRACKET);
    REG_STATIC_FIELD(KEY_CARET);
    REG_STATIC_FIELD(KEY_UNDERSCORE);
    REG_STATIC_FIELD(KEY_BACKQUOTE);
    REG_STATIC_FIELD(KEY_A);
    REG_STATIC_FIELD(KEY_B);
    REG_STATIC_FIELD(KEY_C);
    REG_STATIC_FIELD(KEY_D);
    REG_STATIC_FIELD(KEY_E);
    REG_STATIC_FIELD(KEY_F);
    REG_STATIC_FIELD(KEY_G);
    REG_STATIC_FIELD(KEY_H);
    REG_STATIC_FIELD(KEY_I);
    REG_STATIC_FIELD(KEY_J);
    REG_STATIC_FIELD(KEY_K);
    REG_STATIC_FIELD(KEY_L);
    REG_STATIC_FIELD(KEY_M);
    REG_STATIC_FIELD(KEY_N);
    REG_STATIC_FIELD(KEY_O);
    REG_STATIC_FIELD(KEY_P);
    REG_STATIC_FIELD(KEY_Q);
    REG_STATIC_FIELD(KEY_R);
    REG_STATIC_FIELD(KEY_S);
    REG_STATIC_FIELD(KEY_T);
    REG_STATIC_FIELD(KEY_U);
    REG_STATIC_FIELD(KEY_V);
    REG_STATIC_FIELD(KEY_W);
    REG_STATIC_FIELD(KEY_X);
    REG_STATIC_FIELD(KEY_Y);
    REG_STATIC_FIELD(KEY_Z);

    REG_STATIC_FIELD(KEY_CAPSLOCK);
    REG_STATIC_FIELD(KEY_F1);
    REG_STATIC_FIELD(KEY_F2);
    REG_STATIC_FIELD(KEY_F3);
    REG_STATIC_FIELD(KEY_F4);
    REG_STATIC_FIELD(KEY_F5);
    REG_STATIC_FIELD(KEY_F6);
    REG_STATIC_FIELD(KEY_F7);
    REG_STATIC_FIELD(KEY_F8);
    REG_STATIC_FIELD(KEY_F9);
    REG_STATIC_FIELD(KEY_F10);
    REG_STATIC_FIELD(KEY_F11);
    REG_STATIC_FIELD(KEY_F12);

    REG_STATIC_FIELD(KEY_PRINTSCREEN);
    REG_STATIC_FIELD(KEY_SCROLLLOCK);
    REG_STATIC_FIELD(KEY_PAUSE);
    REG_STATIC_FIELD(KEY_INSERT);
    REG_STATIC_FIELD(KEY_HOME);
    REG_STATIC_FIELD(KEY_PAGEUP);
    REG_STATIC_FIELD(KEY_DELETE);
    REG_STATIC_FIELD(KEY_END);
    REG_STATIC_FIELD(KEY_PAGEDOWN);
    REG_STATIC_FIELD(KEY_RIGHT);
    REG_STATIC_FIELD(KEY_LEFT);
    REG_STATIC_FIELD(KEY_DOWN);
    REG_STATIC_FIELD(KEY_UP);

    REG_STATIC_FIELD(KEY_NUMLOCKCLEAR);
    REG_STATIC_FIELD(KEY_KP_DIVIDE);
    REG_STATIC_FIELD(KEY_KP_MULTIPLY);
    REG_STATIC_FIELD(KEY_KP_MINUS);
    REG_STATIC_FIELD(KEY_KP_PLUS);
    REG_STATIC_FIELD(KEY_KP_ENTER);
    REG_STATIC_FIELD(KEY_KP_1);
    REG_STATIC_FIELD(KEY_KP_2);
    REG_STATIC_FIELD(KEY_KP_3);
    REG_STATIC_FIELD(KEY_KP_4);
    REG_STATIC_FIELD(KEY_KP_5);
    REG_STATIC_FIELD(KEY_KP_6);
    REG_STATIC_FIELD(KEY_KP_7);
    REG_STATIC_FIELD(KEY_KP_8);
    REG_STATIC_FIELD(KEY_KP_9);
    REG_STATIC_FIELD(KEY_KP_0);
    REG_STATIC_FIELD(KEY_KP_PERIOD);

    REG_STATIC_FIELD(KEY_APPLICATION);
    REG_STATIC_FIELD(KEY_POWER);
    REG_STATIC_FIELD(KEY_KP_EQUALS);
    REG_STATIC_FIELD(KEY_F13);
    REG_STATIC_FIELD(KEY_F14);
    REG_STATIC_FIELD(KEY_F15);
    REG_STATIC_FIELD(KEY_F16);
    REG_STATIC_FIELD(KEY_F17);
    REG_STATIC_FIELD(KEY_F18);
    REG_STATIC_FIELD(KEY_F19);
    REG_STATIC_FIELD(KEY_F20);
    REG_STATIC_FIELD(KEY_F21);
    REG_STATIC_FIELD(KEY_F22);
    REG_STATIC_FIELD(KEY_F23);
    REG_STATIC_FIELD(KEY_F24);
    REG_STATIC_FIELD(KEY_EXECUTE);
    REG_STATIC_FIELD(KEY_HELP);
    REG_STATIC_FIELD(KEY_MENU);
    REG_STATIC_FIELD(KEY_SELECT);
    REG_STATIC_FIELD(KEY_STOP);
    REG_STATIC_FIELD(KEY_AGAIN);
    REG_STATIC_FIELD(KEY_UNDO);
    REG_STATIC_FIELD(KEY_CUT);
    REG_STATIC_FIELD(KEY_COPY);
    REG_STATIC_FIELD(KEY_PASTE);
    REG_STATIC_FIELD(KEY_FIND);
    REG_STATIC_FIELD(KEY_MUTE);
    REG_STATIC_FIELD(KEY_VOLUMEUP);
    REG_STATIC_FIELD(KEY_VOLUMEDOWN);
    REG_STATIC_FIELD(KEY_KP_COMMA);
    REG_STATIC_FIELD(KEY_KP_EQUALSAS400);

    REG_STATIC_FIELD(KEY_ALTERASE);
    REG_STATIC_FIELD(KEY_SYSREQ);
    REG_STATIC_FIELD(KEY_CANCEL);
    REG_STATIC_FIELD(KEY_CLEAR);
    REG_STATIC_FIELD(KEY_PRIOR);
    REG_STATIC_FIELD(KEY_RETURN2);
    REG_STATIC_FIELD(KEY_SEPARATOR);
    REG_STATIC_FIELD(KEY_OUT);
    REG_STATIC_FIELD(KEY_OPER);
    REG_STATIC_FIELD(KEY_CLEARAGAIN);
    REG_STATIC_FIELD(KEY_CRSEL);
    REG_STATIC_FIELD(KEY_EXSEL);

    REG_STATIC_FIELD(KEY_KP_00);
    REG_STATIC_FIELD(KEY_KP_000);
    REG_STATIC_FIELD(KEY_THOUSANDSSEPARATOR);
    REG_STATIC_FIELD(KEY_DECIMALSEPARATOR);
    REG_STATIC_FIELD(KEY_CURRENCYUNIT);
    REG_STATIC_FIELD(KEY_CURRENCYSUBUNIT);
    REG_STATIC_FIELD(KEY_KP_LEFTPAREN);
    REG_STATIC_FIELD(KEY_KP_RIGHTPAREN);
    REG_STATIC_FIELD(KEY_KP_LEFTBRACE);
    REG_STATIC_FIELD(KEY_KP_RIGHTBRACE);
    REG_STATIC_FIELD(KEY_KP_TAB);
    REG_STATIC_FIELD(KEY_KP_BACKSPACE);
    REG_STATIC_FIELD(KEY_KP_A);
    REG_STATIC_FIELD(KEY_KP_B);
    REG_STATIC_FIELD(KEY_KP_C);
    REG_STATIC_FIELD(KEY_KP_D);
    REG_STATIC_FIELD(KEY_KP_E);
    REG_STATIC_FIELD(KEY_KP_F);
    REG_STATIC_FIELD(KEY_KP_XOR);
    REG_STATIC_FIELD(KEY_KP_POWER);
    REG_STATIC_FIELD(KEY_KP_PERCENT);
    REG_STATIC_FIELD(KEY_KP_LESS);
    REG_STATIC_FIELD(KEY_KP_GREATER);
    REG_STATIC_FIELD(KEY_KP_AMPERSAND);
    REG_STATIC_FIELD(KEY_KP_DBLAMPERSAND);
    REG_STATIC_FIELD(KEY_KP_VERTICALBAR);
    REG_STATIC_FIELD(KEY_KP_DBLVERTICALBAR);
    REG_STATIC_FIELD(KEY_KP_COLON);
    REG_STATIC_FIELD(KEY_KP_HASH);
    REG_STATIC_FIELD(KEY_KP_SPACE);
    REG_STATIC_FIELD(KEY_KP_AT);
    REG_STATIC_FIELD(KEY_KP_EXCLAM);
    REG_STATIC_FIELD(KEY_KP_MEMSTORE);
    REG_STATIC_FIELD(KEY_KP_MEMRECALL);
    REG_STATIC_FIELD(KEY_KP_MEMCLEAR);
    REG_STATIC_FIELD(KEY_KP_MEMADD);
    REG_STATIC_FIELD(KEY_KP_MEMSUBTRACT);
    REG_STATIC_FIELD(KEY_KP_MEMMULTIPLY);
    REG_STATIC_FIELD(KEY_KP_MEMDIVIDE);
    REG_STATIC_FIELD(KEY_KP_PLUSMINUS);
    REG_STATIC_FIELD(KEY_KP_CLEAR);
    REG_STATIC_FIELD(KEY_KP_CLEARENTRY);
    REG_STATIC_FIELD(KEY_KP_BINARY);
    REG_STATIC_FIELD(KEY_KP_OCTAL);
    REG_STATIC_FIELD(KEY_KP_DECIMAL);
    REG_STATIC_FIELD(KEY_KP_HEXADECIMAL);

    REG_STATIC_FIELD(KEY_LCTRL);
    REG_STATIC_FIELD(KEY_LSHIFT);
    REG_STATIC_FIELD(KEY_LALT);
    REG_STATIC_FIELD(KEY_LGUI);
    REG_STATIC_FIELD(KEY_RCTRL);
    REG_STATIC_FIELD(KEY_RSHIFT);
    REG_STATIC_FIELD(KEY_RALT);
    REG_STATIC_FIELD(KEY_RGUI);

    REG_STATIC_FIELD(KEY_MODE);

    REG_STATIC_FIELD(KEY_AUDIONEXT);
    REG_STATIC_FIELD(KEY_AUDIOPREV);
    REG_STATIC_FIELD(KEY_AUDIOSTOP);
    REG_STATIC_FIELD(KEY_AUDIOPLAY);
    REG_STATIC_FIELD(KEY_AUDIOMUTE);
    REG_STATIC_FIELD(KEY_MEDIASELECT);
    REG_STATIC_FIELD(KEY_WWW);
    REG_STATIC_FIELD(KEY_MAIL);
    REG_STATIC_FIELD(KEY_CALCULATOR);
    REG_STATIC_FIELD(KEY_COMPUTER);
    REG_STATIC_FIELD(KEY_AC_SEARCH);
    REG_STATIC_FIELD(KEY_AC_HOME);
    REG_STATIC_FIELD(KEY_AC_BACK);
    REG_STATIC_FIELD(KEY_AC_FORWARD);
    REG_STATIC_FIELD(KEY_AC_STOP);
    REG_STATIC_FIELD(KEY_AC_REFRESH);
    REG_STATIC_FIELD(KEY_AC_BOOKMARKS);

    REG_STATIC_FIELD(KEY_BRIGHTNESSDOWN);
    REG_STATIC_FIELD(KEY_BRIGHTNESSUP);
    REG_STATIC_FIELD(KEY_DISPLAYSWITCH);
    REG_STATIC_FIELD(KEY_KBDILLUMTOGGLE);
    REG_STATIC_FIELD(KEY_KBDILLUMDOWN);
    REG_STATIC_FIELD(KEY_KBDILLUMUP);
    REG_STATIC_FIELD(KEY_EJECT);
    REG_STATIC_FIELD(KEY_SLEEP);
    REG_STATIC_FIELD(KEY_APP1);
    REG_STATIC_FIELD(KEY_APP2);

    REG_STATIC_FIELD(KEY_AUDIOREWIND);
    REG_STATIC_FIELD(KEY_AUDIOFASTFORWARD);

    REG_STATIC_FIELD(STATIC_BODY);
    REG_STATIC_FIELD(KINEMATIC_BODY);
    REG_STATIC_FIELD(DYNAMIC_BODY);

    REG_STATIC_FIELD(RENDER_SOLID);
    REG_STATIC_FIELD(RENDER_SHARED);
    REG_STATIC_FIELD(RENDER_LCD);
    REG_STATIC_FIELD(RENDER_BLENDED);

    REG_STATIC_FIELD(ALIGN_LEFT);
    REG_STATIC_FIELD(ALIGN_MIDDLE);
    REG_STATIC_FIELD(ALIGN_RIGHT);

    REG_STATIC_FIELD(WINDOW_NORMAL);
    REG_STATIC_FIELD(WINDOW_MAXIMIZED);
    REG_STATIC_FIELD(WINDOW_FULL);
    REG_STATIC_FIELD(WINDOW_FULL_DESK);
}

std::vector<std::pair<std::string, int>> Enums::enums;
void Enums::AddEnum(const std::string& enumName, int val) {
    auto& mgr = ReflMgr::Instance();
    enums.push_back({ enumName, val });
    int* ptr = &enums.back().second;
    mgr.RawAddStaticField(TypeID::get<Enums>(), TypeID::get<int>(), enums.back().first, std::function(
        [ptr]() {
            return ObjectPtr(TypeID::get<int>(), (void*)ptr);
        }
    ));
}
